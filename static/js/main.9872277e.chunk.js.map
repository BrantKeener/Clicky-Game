{"version":3,"sources":["components/Header.js","components/Score.js","components/CardContainer.js","components/Card.js","components/StartButton.js","components/Modal.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Score","_ref","score","highScore","id","CardContainer","props","children","Card","name","src","onClick","className","alt","Button","choice","Modal","winScore","StartButton","startClick","GameContainer","state","cards","guessed","startModal","handleClick","event","target","guessedArray","_this","includes","duplicateGuess","push","uniqueGuess","showModal","imageFlipToggle","reset","array","shuffleArray","adjustHigh","setTimeout","setState","document","getElementById","classList","toggle","card","getElementsByClassName","Object","toConsumableArray","forEach","element","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","_this2","this","components_Modal","components_Header","components_Score","components_CardContainer","map","components_Card","key","Component","App","components_GameContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9872277e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <h1>Click Memory Game</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Score = ({ score, highScore }) => {\r\n  return (\r\n  <div id='score'>\r\n    <h1>Your Score: {score} || High Score: {highScore}</h1>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Score;","import React from 'react';\r\n\r\nconst CardContainer = (props) => {\r\n  const {children} = props;\r\n  return (\r\n    <div id='card-container'>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardContainer;","import React from 'react';\r\n\r\n// An object that stores the various images of our cards, and gives them an id.\r\n\r\n\r\nconst Card = ({ name, id, src, onClick }) => {\r\n  return (\r\n    <div className='flip-card'>\r\n        <div className='flip-card-inner'>\r\n          <div className='flip-card-front'>\r\n            <img src={src} id={id} alt={name} onClick={onClick}></img>\r\n          </div>\r\n          <div className='flip-card-back'>\r\n            <img src={'./images/expanse-playing-card.png'} alt='Card Back'/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nconst Button = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <button id='start' name='start' onClick={props.onClick}>{props.choice ? 'Start' : 'Retry'}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport StartButton from './StartButton';\r\n\r\nconst Modal = (props) => {\r\n  return (\r\n    <div id='modal-bg'>\r\n      <div id='modal'>\r\n        {props.choice ? \r\n        <div id='instructions-opening'>\r\n        <p>The crew of the Roci are in trouble. It is up to you to help them out. By clicking on the cards, you are either:</p>\r\n        <ol id='instruction-list'>\r\n          <li>Rescuing Crew Members</li>\r\n          <li>Incinerating Protomolucule Mutants</li>\r\n        </ol>\r\n        <p>However, you must not click the same card twice. This will give away the Roci's position, and open the crew to retaliation.</p>\r\n        <p>Good Luck!</p>\r\n        </div>\r\n        : (props.winScore === 12 ? \r\n          <div>\r\n            <p>Helluva job!</p>\r\n            <img id='win' src='./images/win.gif' alt='Win Gif'/>\r\n          </div> \r\n        : <img id='explosion' src='./images/explosion.gif' alt='Explosion Gif'/>)}\r\n        <StartButton choice = {props.choice} onClick = {props.startClick}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Score from './Score';\r\nimport CardContainer from './CardContainer';\r\nimport Card from './Card';\r\nimport Modal from './Modal';\r\n\r\nclass GameContainer extends Component {\r\n\r\n  state = {\r\n    cards: [\r\n      {\r\n        name: 'amos',\r\n        src: './images/Amos.PNG',\r\n        id: 0\r\n      },\r\n      {\r\n        name: 'Chrisjen',\r\n        src: './images/Chrisjen.PNG',\r\n        id: 1\r\n      },\r\n      {\r\n        name: 'Draper',\r\n        src: './images/Draper.PNG',\r\n        id: 2\r\n      },\r\n      {\r\n        name: 'Fred Johnson',\r\n        src: './images/Fred_Johnson.PNG',\r\n        id: 3\r\n      },\r\n      {\r\n        name: 'Holden',\r\n        src: './images/Holden.PNG',\r\n        id: 4\r\n      },\r\n      {\r\n        name: 'Jump',\r\n        src: './images/Jump.PNG',\r\n        id: 5\r\n      },\r\n      {\r\n        name: 'Kamal',\r\n        src: './images/Kamal.PNG',\r\n        id: 6\r\n      },\r\n      {\r\n        name: 'Miller_Gun',\r\n        src: './images/Miller_Gun.PNG',\r\n        id: 7\r\n      },\r\n      {\r\n        name: 'Miller',\r\n        src: './images/Miller.PNG',\r\n        id: 8\r\n      },\r\n      {\r\n        name: 'Monster',\r\n        src: './images/Monster.PNG',\r\n        id: 9\r\n      },\r\n      {\r\n        name: 'Naomi',\r\n        src: './images/Naomi.PNG',\r\n        id: 10\r\n      },\r\n      {\r\n        name: 'Roci',\r\n        src: './images/Roci.PNG',\r\n        id: 11\r\n      }\r\n    ],\r\n    guessed: [],\r\n    score: 0,\r\n    highScore: 0,\r\n    startModal: true,\r\n  };\r\n\r\n  handleClick = (event) => {\r\n    const { id } = event.target;\r\n    if(id !== 'start') {\r\n      const guessedArray = this.state.guessed;\r\n      if(guessedArray.includes(id)) {\r\n        this.duplicateGuess();\r\n      } else {\r\n        guessedArray.push(id);\r\n        this.uniqueGuess(guessedArray);\r\n      };\r\n    } else if(id === 'start') {\r\n      this.showModal();\r\n      this.imageFlipToggle();\r\n      if(this.state.startModal === false) {\r\n        this.reset();\r\n      };\r\n    };\r\n  };\r\n\r\n  uniqueGuess = (guessedArray) => {\r\n    const array = this.shuffleArray(this.state.cards);\r\n    let score = this.state.score;\r\n    let highScore = this.state.highScore;\r\n    score++;\r\n    const adjustHigh = (highScore > score) ? highScore : score;\r\n    this.imageFlipToggle();\r\n    setTimeout(() => {\r\n      this.setState({ startModal: false });\r\n      this.setState({ cards: array });\r\n      this.setState({ guessed: guessedArray });\r\n      this.setState({ score: score });\r\n      this.setState({ highScore: adjustHigh });\r\n      setTimeout(() => {\r\n        this.imageFlipToggle();\r\n      }, 500);\r\n    }, 700);\r\n    if(score === 12) {\r\n      this.imageFlipToggle();\r\n      setTimeout(() => {\r\n        this.showModal()\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ guessed: [] });\r\n    this.setState({ score: 0 });\r\n  }\r\n\r\n  duplicateGuess = () => {\r\n    this.setState({ guessed: [] });\r\n    this.setState({ score: 0 });\r\n    this.imageFlipToggle();\r\n    this.showModal();\r\n  };\r\n\r\n  showModal = () => {\r\n    const modal = document.getElementById('modal-bg');\r\n    modal.classList.toggle('modal-hide');\r\n  };\r\n\r\n  imageFlipToggle = () => {\r\n    const card = document.getElementsByClassName('flip-card-inner');\r\n    const imgArray = [...card];\r\n    imgArray.forEach((element) => {\r\n      element.classList.toggle('flip-to-back')\r\n    });\r\n  };\r\n\r\n  // Fisher Yates for the shuffle\r\n  shuffleArray = (array) => {\r\n    let currentIndex = array.length;\r\n    let temporaryValue = '';\r\n    let randomIndex = '';\r\n\r\n    while(currentIndex !== 0) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div id='game-container'>\r\n        <Modal winScore={this.state.score} choice={this.state.startModal} startClick={this.handleClick}/>\r\n        <Header />\r\n        <Score \r\n          score = {this.state.score}\r\n          highScore = {this.state.highScore}/>\r\n        <CardContainer> \r\n          {this.shuffleArray(this.state.cards).map((card) => {\r\n            return (\r\n              <Card key={card.id}\r\n                id={card.id}\r\n                src={card.src}\r\n                name={card.name} \r\n                onClick={this.handleClick}/>  \r\n            )\r\n          })}\r\n        </CardContainer>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default GameContainer;","import React from 'react';\nimport GameContainer from './components/GameContainer';\nimport './App.css';\n\n\nconst App = () => {\n  return <GameContainer />\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}